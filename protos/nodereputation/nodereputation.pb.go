// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodereputation.proto

package nodereputation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ColumnName int32

const (
	ColumnName_node_name             ColumnName = 0
	ColumnName_uptime                ColumnName = 1
	ColumnName_timestamp             ColumnName = 2
	ColumnName_audit_success         ColumnName = 3
	ColumnName_audit_fail            ColumnName = 4
	ColumnName_latency               ColumnName = 5
	ColumnName_amount_of_data_stored ColumnName = 6
	ColumnName_false_claims          ColumnName = 7
	ColumnName_shards_modified       ColumnName = 8
)

var ColumnName_name = map[int32]string{
	0: "node_name",
	1: "uptime",
	2: "timestamp",
	3: "audit_success",
	4: "audit_fail",
	5: "latency",
	6: "amount_of_data_stored",
	7: "false_claims",
	8: "shards_modified",
}
var ColumnName_value = map[string]int32{
	"node_name":             0,
	"uptime":                1,
	"timestamp":             2,
	"audit_success":         3,
	"audit_fail":            4,
	"latency":               5,
	"amount_of_data_stored": 6,
	"false_claims":          7,
	"shards_modified":       8,
}

func (x ColumnName) String() string {
	return proto.EnumName(ColumnName_name, int32(x))
}
func (ColumnName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{0}
}

type UpdateReply_ReplyType int32

const (
	UpdateReply_UPDATE_SUCCESS UpdateReply_ReplyType = 0
	UpdateReply_UPDATE_FAILED  UpdateReply_ReplyType = 1
)

var UpdateReply_ReplyType_name = map[int32]string{
	0: "UPDATE_SUCCESS",
	1: "UPDATE_FAILED",
}
var UpdateReply_ReplyType_value = map[string]int32{
	"UPDATE_SUCCESS": 0,
	"UPDATE_FAILED":  1,
}

func (x UpdateReply_ReplyType) String() string {
	return proto.EnumName(UpdateReply_ReplyType_name, int32(x))
}
func (UpdateReply_ReplyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{2, 0}
}

type NodeReputationConstraint_Operand int32

const (
	NodeReputationConstraint_EQUAL_TO              NodeReputationConstraint_Operand = 0
	NodeReputationConstraint_GREATER_THAN          NodeReputationConstraint_Operand = 1
	NodeReputationConstraint_GREATER_THAN_EQUAL_TO NodeReputationConstraint_Operand = 2
	NodeReputationConstraint_LESS_THAN             NodeReputationConstraint_Operand = 3
	NodeReputationConstraint_LESS_THAN_EQUAL_TO    NodeReputationConstraint_Operand = 4
	NodeReputationConstraint_NOT_EQUAL_TO          NodeReputationConstraint_Operand = 5
)

var NodeReputationConstraint_Operand_name = map[int32]string{
	0: "EQUAL_TO",
	1: "GREATER_THAN",
	2: "GREATER_THAN_EQUAL_TO",
	3: "LESS_THAN",
	4: "LESS_THAN_EQUAL_TO",
	5: "NOT_EQUAL_TO",
}
var NodeReputationConstraint_Operand_value = map[string]int32{
	"EQUAL_TO":              0,
	"GREATER_THAN":          1,
	"GREATER_THAN_EQUAL_TO": 2,
	"LESS_THAN":             3,
	"LESS_THAN_EQUAL_TO":    4,
	"NOT_EQUAL_TO":          5,
}

func (x NodeReputationConstraint_Operand) String() string {
	return proto.EnumName(NodeReputationConstraint_Operand_name, int32(x))
}
func (NodeReputationConstraint_Operand) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{5, 0}
}

type NodeReputationRecord struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	Timestamp            string   `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Uptime               int64    `protobuf:"varint,3,opt,name=uptime" json:"uptime,omitempty"`
	AuditSuccess         int64    `protobuf:"varint,4,opt,name=auditSuccess" json:"auditSuccess,omitempty"`
	AuditFail            int64    `protobuf:"varint,5,opt,name=auditFail" json:"auditFail,omitempty"`
	Latency              int64    `protobuf:"varint,6,opt,name=latency" json:"latency,omitempty"`
	AmountOfDataStored   int64    `protobuf:"varint,7,opt,name=amountOfDataStored" json:"amountOfDataStored,omitempty"`
	FalseClaims          int64    `protobuf:"varint,8,opt,name=falseClaims" json:"falseClaims,omitempty"`
	ShardsModified       int64    `protobuf:"varint,9,opt,name=shardsModified" json:"shardsModified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReputationRecord) Reset()         { *m = NodeReputationRecord{} }
func (m *NodeReputationRecord) String() string { return proto.CompactTextString(m) }
func (*NodeReputationRecord) ProtoMessage()    {}
func (*NodeReputationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{0}
}
func (m *NodeReputationRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationRecord.Unmarshal(m, b)
}
func (m *NodeReputationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationRecord.Marshal(b, m, deterministic)
}
func (dst *NodeReputationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationRecord.Merge(dst, src)
}
func (m *NodeReputationRecord) XXX_Size() int {
	return xxx_messageInfo_NodeReputationRecord.Size(m)
}
func (m *NodeReputationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationRecord proto.InternalMessageInfo

func (m *NodeReputationRecord) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeReputationRecord) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *NodeReputationRecord) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *NodeReputationRecord) GetAuditSuccess() int64 {
	if m != nil {
		return m.AuditSuccess
	}
	return 0
}

func (m *NodeReputationRecord) GetAuditFail() int64 {
	if m != nil {
		return m.AuditFail
	}
	return 0
}

func (m *NodeReputationRecord) GetLatency() int64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *NodeReputationRecord) GetAmountOfDataStored() int64 {
	if m != nil {
		return m.AmountOfDataStored
	}
	return 0
}

func (m *NodeReputationRecord) GetFalseClaims() int64 {
	if m != nil {
		return m.FalseClaims
	}
	return 0
}

func (m *NodeReputationRecord) GetShardsModified() int64 {
	if m != nil {
		return m.ShardsModified
	}
	return 0
}

type NodeReputationRecords struct {
	Records              []*NodeReputationRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NodeReputationRecords) Reset()         { *m = NodeReputationRecords{} }
func (m *NodeReputationRecords) String() string { return proto.CompactTextString(m) }
func (*NodeReputationRecords) ProtoMessage()    {}
func (*NodeReputationRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{1}
}
func (m *NodeReputationRecords) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationRecords.Unmarshal(m, b)
}
func (m *NodeReputationRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationRecords.Marshal(b, m, deterministic)
}
func (dst *NodeReputationRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationRecords.Merge(dst, src)
}
func (m *NodeReputationRecords) XXX_Size() int {
	return xxx_messageInfo_NodeReputationRecords.Size(m)
}
func (m *NodeReputationRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationRecords.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationRecords proto.InternalMessageInfo

func (m *NodeReputationRecords) GetRecords() []*NodeReputationRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type UpdateReply struct {
	BridgeName           string                `protobuf:"bytes,1,opt,name=bridgeName" json:"bridgeName,omitempty"`
	NodeName             string                `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
	Status               UpdateReply_ReplyType `protobuf:"varint,3,opt,name=status,enum=nodereputation.UpdateReply_ReplyType" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateReply) Reset()         { *m = UpdateReply{} }
func (m *UpdateReply) String() string { return proto.CompactTextString(m) }
func (*UpdateReply) ProtoMessage()    {}
func (*UpdateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{2}
}
func (m *UpdateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReply.Unmarshal(m, b)
}
func (m *UpdateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReply.Marshal(b, m, deterministic)
}
func (dst *UpdateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReply.Merge(dst, src)
}
func (m *UpdateReply) XXX_Size() int {
	return xxx_messageInfo_UpdateReply.Size(m)
}
func (m *UpdateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReply proto.InternalMessageInfo

func (m *UpdateReply) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *UpdateReply) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *UpdateReply) GetStatus() UpdateReply_ReplyType {
	if m != nil {
		return m.Status
	}
	return UpdateReply_UPDATE_SUCCESS
}

type NodeID struct {
	NodeName             string   `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeID) Reset()         { *m = NodeID{} }
func (m *NodeID) String() string { return proto.CompactTextString(m) }
func (*NodeID) ProtoMessage()    {}
func (*NodeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{3}
}
func (m *NodeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeID.Unmarshal(m, b)
}
func (m *NodeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeID.Marshal(b, m, deterministic)
}
func (dst *NodeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeID.Merge(dst, src)
}
func (m *NodeID) XXX_Size() int {
	return xxx_messageInfo_NodeID.Size(m)
}
func (m *NodeID) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeID.DiscardUnknown(m)
}

var xxx_messageInfo_NodeID proto.InternalMessageInfo

func (m *NodeID) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type NodeUpdate struct {
	NodeName             string     `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	ColumnName           ColumnName `protobuf:"varint,2,opt,name=columnName,enum=nodereputation.ColumnName" json:"columnName,omitempty"`
	ColumnValue          string     `protobuf:"bytes,3,opt,name=columnValue" json:"columnValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *NodeUpdate) Reset()         { *m = NodeUpdate{} }
func (m *NodeUpdate) String() string { return proto.CompactTextString(m) }
func (*NodeUpdate) ProtoMessage()    {}
func (*NodeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{4}
}
func (m *NodeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeUpdate.Unmarshal(m, b)
}
func (m *NodeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeUpdate.Marshal(b, m, deterministic)
}
func (dst *NodeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeUpdate.Merge(dst, src)
}
func (m *NodeUpdate) XXX_Size() int {
	return xxx_messageInfo_NodeUpdate.Size(m)
}
func (m *NodeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NodeUpdate proto.InternalMessageInfo

func (m *NodeUpdate) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeUpdate) GetColumnName() ColumnName {
	if m != nil {
		return m.ColumnName
	}
	return ColumnName_node_name
}

func (m *NodeUpdate) GetColumnValue() string {
	if m != nil {
		return m.ColumnValue
	}
	return ""
}

type NodeReputationConstraint struct {
	ColumnName           ColumnName                       `protobuf:"varint,1,opt,name=columnName,enum=nodereputation.ColumnName" json:"columnName,omitempty"`
	Operand              NodeReputationConstraint_Operand `protobuf:"varint,2,opt,name=operand,enum=nodereputation.NodeReputationConstraint_Operand" json:"operand,omitempty"`
	ColumnValue          string                           `protobuf:"bytes,3,opt,name=columnValue" json:"columnValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *NodeReputationConstraint) Reset()         { *m = NodeReputationConstraint{} }
func (m *NodeReputationConstraint) String() string { return proto.CompactTextString(m) }
func (*NodeReputationConstraint) ProtoMessage()    {}
func (*NodeReputationConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{5}
}
func (m *NodeReputationConstraint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReputationConstraint.Unmarshal(m, b)
}
func (m *NodeReputationConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReputationConstraint.Marshal(b, m, deterministic)
}
func (dst *NodeReputationConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReputationConstraint.Merge(dst, src)
}
func (m *NodeReputationConstraint) XXX_Size() int {
	return xxx_messageInfo_NodeReputationConstraint.Size(m)
}
func (m *NodeReputationConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReputationConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReputationConstraint proto.InternalMessageInfo

func (m *NodeReputationConstraint) GetColumnName() ColumnName {
	if m != nil {
		return m.ColumnName
	}
	return ColumnName_node_name
}

func (m *NodeReputationConstraint) GetOperand() NodeReputationConstraint_Operand {
	if m != nil {
		return m.Operand
	}
	return NodeReputationConstraint_EQUAL_TO
}

func (m *NodeReputationConstraint) GetColumnValue() string {
	if m != nil {
		return m.ColumnValue
	}
	return ""
}

type Constraints struct {
	Constraints          []*NodeReputationConstraint `protobuf:"bytes,1,rep,name=constraints" json:"constraints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Constraints) Reset()         { *m = Constraints{} }
func (m *Constraints) String() string { return proto.CompactTextString(m) }
func (*Constraints) ProtoMessage()    {}
func (*Constraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodereputation_a54b52d556eaa9bf, []int{6}
}
func (m *Constraints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Constraints.Unmarshal(m, b)
}
func (m *Constraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Constraints.Marshal(b, m, deterministic)
}
func (dst *Constraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Constraints.Merge(dst, src)
}
func (m *Constraints) XXX_Size() int {
	return xxx_messageInfo_Constraints.Size(m)
}
func (m *Constraints) XXX_DiscardUnknown() {
	xxx_messageInfo_Constraints.DiscardUnknown(m)
}

var xxx_messageInfo_Constraints proto.InternalMessageInfo

func (m *Constraints) GetConstraints() []*NodeReputationConstraint {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeReputationRecord)(nil), "nodereputation.NodeReputationRecord")
	proto.RegisterType((*NodeReputationRecords)(nil), "nodereputation.NodeReputationRecords")
	proto.RegisterType((*UpdateReply)(nil), "nodereputation.UpdateReply")
	proto.RegisterType((*NodeID)(nil), "nodereputation.NodeID")
	proto.RegisterType((*NodeUpdate)(nil), "nodereputation.NodeUpdate")
	proto.RegisterType((*NodeReputationConstraint)(nil), "nodereputation.NodeReputationConstraint")
	proto.RegisterType((*Constraints)(nil), "nodereputation.Constraints")
	proto.RegisterEnum("nodereputation.ColumnName", ColumnName_name, ColumnName_value)
	proto.RegisterEnum("nodereputation.UpdateReply_ReplyType", UpdateReply_ReplyType_name, UpdateReply_ReplyType_value)
	proto.RegisterEnum("nodereputation.NodeReputationConstraint_Operand", NodeReputationConstraint_Operand_name, NodeReputationConstraint_Operand_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeReputationClient is the client API for NodeReputation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeReputationClient interface {
	GetNodeReputation(ctx context.Context, in *Constraints, opts ...grpc.CallOption) (*NodeReputationRecords, error)
	LookUpNodeReputation(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*NodeReputationRecord, error)
	UpdateNodeReputation(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (*UpdateReply, error)
}

type nodeReputationClient struct {
	cc *grpc.ClientConn
}

func NewNodeReputationClient(cc *grpc.ClientConn) NodeReputationClient {
	return &nodeReputationClient{cc}
}

func (c *nodeReputationClient) GetNodeReputation(ctx context.Context, in *Constraints, opts ...grpc.CallOption) (*NodeReputationRecords, error) {
	out := new(NodeReputationRecords)
	err := c.cc.Invoke(ctx, "/nodereputation.NodeReputation/GetNodeReputation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReputationClient) LookUpNodeReputation(ctx context.Context, in *NodeID, opts ...grpc.CallOption) (*NodeReputationRecord, error) {
	out := new(NodeReputationRecord)
	err := c.cc.Invoke(ctx, "/nodereputation.NodeReputation/LookUpNodeReputation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeReputationClient) UpdateNodeReputation(ctx context.Context, in *NodeUpdate, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/nodereputation.NodeReputation/UpdateNodeReputation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeReputation service

type NodeReputationServer interface {
	GetNodeReputation(context.Context, *Constraints) (*NodeReputationRecords, error)
	LookUpNodeReputation(context.Context, *NodeID) (*NodeReputationRecord, error)
	UpdateNodeReputation(context.Context, *NodeUpdate) (*UpdateReply, error)
}

func RegisterNodeReputationServer(s *grpc.Server, srv NodeReputationServer) {
	s.RegisterService(&_NodeReputation_serviceDesc, srv)
}

func _NodeReputation_GetNodeReputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Constraints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).GetNodeReputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/GetNodeReputation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).GetNodeReputation(ctx, req.(*Constraints))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeReputation_LookUpNodeReputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).LookUpNodeReputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/LookUpNodeReputation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).LookUpNodeReputation(ctx, req.(*NodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeReputation_UpdateNodeReputation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeReputationServer).UpdateNodeReputation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodereputation.NodeReputation/UpdateNodeReputation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeReputationServer).UpdateNodeReputation(ctx, req.(*NodeUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeReputation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodereputation.NodeReputation",
	HandlerType: (*NodeReputationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeReputation",
			Handler:    _NodeReputation_GetNodeReputation_Handler,
		},
		{
			MethodName: "LookUpNodeReputation",
			Handler:    _NodeReputation_LookUpNodeReputation_Handler,
		},
		{
			MethodName: "UpdateNodeReputation",
			Handler:    _NodeReputation_UpdateNodeReputation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodereputation.proto",
}

func init() {
	proto.RegisterFile("nodereputation.proto", fileDescriptor_nodereputation_a54b52d556eaa9bf)
}

var fileDescriptor_nodereputation_a54b52d556eaa9bf = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xda, 0x4a,
	0x14, 0xc6, 0x90, 0xf0, 0x73, 0x48, 0xb8, 0xce, 0xb9, 0x24, 0xf2, 0x25, 0x57, 0x57, 0xc8, 0x4a,
	0xae, 0x50, 0x17, 0xa8, 0xa2, 0xbb, 0x4a, 0xad, 0x84, 0x80, 0xa4, 0x89, 0x28, 0x34, 0x06, 0x52,
	0x65, 0x65, 0x4d, 0xb0, 0x69, 0xad, 0xda, 0x1e, 0xcb, 0x33, 0x5e, 0x64, 0xd1, 0x6d, 0x1f, 0xa1,
	0xcf, 0xd0, 0x87, 0xa8, 0xba, 0xe9, 0x8b, 0x55, 0x33, 0x06, 0x63, 0x5c, 0x84, 0xe8, 0x26, 0xca,
	0xf9, 0xce, 0x77, 0xfe, 0xe6, 0x1c, 0x7f, 0x40, 0xdd, 0xa7, 0x96, 0x1d, 0xda, 0x41, 0xc4, 0x09,
	0x77, 0xa8, 0xdf, 0x0e, 0x42, 0xca, 0x29, 0xd6, 0x36, 0x51, 0xfd, 0x47, 0x1e, 0xea, 0x23, 0x6a,
	0xd9, 0x46, 0x02, 0x19, 0xf6, 0x9c, 0x86, 0x16, 0x36, 0xa0, 0x2c, 0xa8, 0x23, 0xe2, 0xd9, 0x9a,
	0xd2, 0x54, 0x5a, 0x15, 0x23, 0xb1, 0xf1, 0x5f, 0xa8, 0x70, 0xc7, 0xb3, 0x19, 0x27, 0x5e, 0xa0,
	0xe5, 0xa5, 0x73, 0x0d, 0xe0, 0x19, 0x14, 0xa3, 0x40, 0x98, 0x5a, 0xa1, 0xa9, 0xb4, 0x0a, 0xc6,
	0xd2, 0x42, 0x1d, 0x8e, 0x48, 0x64, 0x39, 0x7c, 0x12, 0xcd, 0xe7, 0x36, 0x63, 0xda, 0x81, 0xf4,
	0x6e, 0x60, 0x22, 0xb3, 0xb4, 0xaf, 0x88, 0xe3, 0x6a, 0x87, 0x92, 0xb0, 0x06, 0x50, 0x83, 0x92,
	0x4b, 0xb8, 0xed, 0xcf, 0x9f, 0xb4, 0xa2, 0xf4, 0xad, 0x4c, 0x6c, 0x03, 0x12, 0x8f, 0x46, 0x3e,
	0x1f, 0x2f, 0xfa, 0x84, 0x93, 0x09, 0xa7, 0xa1, 0x6d, 0x69, 0x25, 0x49, 0xda, 0xe2, 0xc1, 0x26,
	0x54, 0x17, 0xc4, 0x65, 0x76, 0xcf, 0x25, 0x8e, 0xc7, 0xb4, 0xb2, 0x24, 0xa6, 0x21, 0xfc, 0x1f,
	0x6a, 0xec, 0x23, 0x09, 0x2d, 0xf6, 0x96, 0x5a, 0xce, 0xc2, 0xb1, 0x2d, 0xad, 0x22, 0x49, 0x19,
	0x54, 0x7f, 0x0f, 0xa7, 0xdb, 0xde, 0x8f, 0xe1, 0x6b, 0x28, 0x85, 0xf1, 0xbf, 0x9a, 0xd2, 0x2c,
	0xb4, 0xaa, 0x9d, 0x8b, 0x76, 0x66, 0x23, 0xdb, 0xe2, 0x8c, 0x55, 0x90, 0xfe, 0x5d, 0x81, 0xea,
	0x2c, 0xb0, 0x08, 0x17, 0x1c, 0xf7, 0x09, 0xff, 0x03, 0x78, 0x0c, 0x1d, 0xeb, 0x43, 0x7a, 0x25,
	0x29, 0x64, 0x63, 0x61, 0xf9, 0xcc, 0xc2, 0x5e, 0x41, 0x91, 0x71, 0xc2, 0x23, 0x26, 0x57, 0x52,
	0xeb, 0x5c, 0x66, 0x5b, 0x49, 0x15, 0x6a, 0xcb, 0xbf, 0xd3, 0xa7, 0xc0, 0x36, 0x96, 0x41, 0x7a,
	0x07, 0x2a, 0x09, 0x88, 0x08, 0xb5, 0xd9, 0xbb, 0x7e, 0x77, 0x3a, 0x30, 0x27, 0xb3, 0x5e, 0x6f,
	0x30, 0x99, 0xa8, 0x39, 0x3c, 0x81, 0xe3, 0x25, 0x76, 0xd5, 0xbd, 0x19, 0x0e, 0xfa, 0xaa, 0xa2,
	0x5f, 0x40, 0x51, 0xcc, 0x77, 0xd3, 0xdf, 0x75, 0x49, 0xfa, 0x17, 0x05, 0x40, 0xd0, 0xe2, 0xfa,
	0x3b, 0x8f, 0xee, 0x25, 0xc0, 0x9c, 0xba, 0x91, 0xe7, 0x27, 0x13, 0xd6, 0x3a, 0x8d, 0xec, 0x1c,
	0xbd, 0x84, 0x61, 0xa4, 0xd8, 0x62, 0xdd, 0xb1, 0x75, 0x4f, 0xdc, 0x28, 0xbe, 0xcb, 0x8a, 0x91,
	0x86, 0xf4, 0x9f, 0x79, 0xd0, 0x36, 0xf7, 0xd1, 0xa3, 0x3e, 0xe3, 0x21, 0x71, 0x7c, 0x9e, 0x29,
	0xad, 0xfc, 0x51, 0xe9, 0x5b, 0x28, 0xd1, 0xc0, 0x0e, 0x89, 0x6f, 0x2d, 0x7b, 0x7e, 0xbe, 0xfb,
	0x0c, 0xd6, 0x65, 0xdb, 0xe3, 0x38, 0xce, 0x58, 0x25, 0xd8, 0x63, 0x8c, 0xcf, 0x50, 0x5a, 0x46,
	0xe1, 0x11, 0x94, 0x07, 0x77, 0xb3, 0xee, 0xd0, 0x9c, 0x8e, 0xd5, 0x1c, 0xaa, 0x70, 0x74, 0x6d,
	0x0c, 0xba, 0xd3, 0x81, 0x61, 0x4e, 0xdf, 0x74, 0x47, 0xaa, 0x82, 0xff, 0xc0, 0x69, 0x1a, 0x31,
	0x13, 0x72, 0x1e, 0x8f, 0xa1, 0x32, 0x1c, 0x4c, 0x26, 0x31, 0xb3, 0x80, 0x67, 0x80, 0x89, 0xb9,
	0xa6, 0x1d, 0x88, 0x9c, 0xa3, 0xf1, 0x74, 0x8d, 0x1c, 0xea, 0x0f, 0x50, 0x5d, 0xf7, 0xcf, 0xf0,
	0x56, 0xf4, 0x9b, 0x98, 0xcb, 0xcf, 0xa0, 0xb5, 0xef, 0xfc, 0x46, 0x3a, 0xf8, 0xd9, 0x37, 0x05,
	0x60, 0xfd, 0xc4, 0xa2, 0x45, 0x91, 0xc6, 0xf4, 0x89, 0x67, 0xab, 0x39, 0x84, 0x95, 0xe6, 0xa8,
	0x8a, 0x70, 0x25, 0x62, 0xa4, 0xe6, 0xc5, 0x6d, 0x4a, 0x05, 0x31, 0x59, 0xac, 0x31, 0x6a, 0x01,
	0x6b, 0x00, 0x31, 0xb4, 0x20, 0x8e, 0xab, 0x1e, 0x60, 0x35, 0xd1, 0x15, 0xf5, 0x50, 0xbc, 0x4b,
	0x2c, 0x18, 0x26, 0x5d, 0x98, 0x16, 0xe1, 0xc4, 0x64, 0x52, 0x33, 0xd4, 0xa2, 0x18, 0x58, 0x4a,
	0x84, 0x39, 0x97, 0x1a, 0xa1, 0x96, 0xf0, 0x6f, 0xf8, 0x2b, 0xd6, 0x03, 0xd3, 0x5b, 0x0a, 0x82,
	0x5a, 0xee, 0x7c, 0xcd, 0x43, 0x6d, 0x73, 0x28, 0x7c, 0x80, 0x93, 0x6b, 0x9b, 0x67, 0xc0, 0xf3,
	0xdf, 0x4f, 0x28, 0x99, 0xb7, 0x71, 0xb9, 0x8f, 0x5a, 0x30, 0x3d, 0x87, 0xf7, 0x50, 0x1f, 0x52,
	0xfa, 0x69, 0x16, 0x64, 0xb2, 0x9f, 0x6d, 0x4b, 0x70, 0xd3, 0x6f, 0xec, 0x25, 0x43, 0x7a, 0x0e,
	0xef, 0xa0, 0x1e, 0x7f, 0x95, 0x99, 0xbc, 0x8d, 0x6d, 0xf1, 0x31, 0xb3, 0x71, 0xbe, 0x43, 0x57,
	0xf4, 0xdc, 0x63, 0x51, 0xfe, 0x06, 0xbd, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x14, 0x42,
	0x75, 0x9b, 0x06, 0x00, 0x00,
}
